name: Pull and Deploy
run-name: ${{ github.actor }} is learning Github Actions
on:
  create:
    tags:
      - v*
    branches:
      - main
jobs:
  deploy:
    environment:
      name: prod_secrets
    runs-on: self-hosted
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapisql:v0.1

      - name: Check and Initialise Docker Swarm
        run: |
          if docker info | grep -q "Swarm: active"; then
            echo "Docker Swarm is already active."
          else
            echo "Initialising Docker Swarm..."
            docker swarm init
          fi

      - name: Manage Docker Secrets
        run: |
          # Define the secrets
          SECRETS=("ALGORITHM" "ACCESS_TOKEN_EXPIRATION_MINUTES" "SECRET_KEY" "DATABASE_USER" "DATABASE" "DATABASE_HOST" "DATABASE_PORT" "DATABASE_PASSWORD")

          # Check and remove existing secrets
          for secret in "${SECRETS[@]}"; do
            if docker secret ls | grep -q "$secret"; then
              echo "Removing existing secret: $secret"
              docker secret rm $secret
            fi
          done

          for secret in "${SECRETS[@]}"; do
            secret_value="${{ secrets[secret] }}"
            docker secret create $secret = <<< "$secret_value"
          done

      - name: Deploy to Docker Swarm
        run: |
          # docker secret create ALGORITHM - <<< "${{secrets.ALGORITHM}}"
          # docker secret create ACCESS_TOKEN_EXPIRATION_MINUTES - <<< "${{secrets.ACCESS_TOKEN_EXPIRATION_MINUTES}}"
          # docker secret create SECRET_KEY - <<< "${{secrets.SECRET_KEY}}"
          # docker secret create DATABASE_USER - <<< "${{secrets.DATABASE_USER}}"
          # docker secret create DATABASE - <<< "${{secrets.DATABASE}}"
          # docker secret create DATABASE_HOST - <<< "${{secrets.DATABASE_HOST}}"
          # docker secret create DATABASE_PORT - <<< "${{secrets.DATABASE_PORT}}"
          # docker secret create DATABASE_PASSWORD - <<< "${{secrets.DATABASE_PASSWORD}}"

          docker service create --name fast-app \
            --secret ALGORITHM \
            --secret ACCESS_TOKEN_EXPIRATION_MINUTES \
            --secret SECRET_KEY \
            --secret DATABASE_USER \
            --secret DATABASE \
            --secret DATABASE_HOST \
            --secret DATABASE_PORT \
            --secret DATABASE_PASSWORD \
            --env ALGORITHM_FILE=/run/secrets/ALGORITHM \
            --env ACCESS_TOKEN_EXPIRATION_MINUTES_FILE=/run/secrets/ACCESS_TOKEN_EXPIRATION_MINUTES \
            --env SECRET_KEY_FILE=/run/secrets/SECRET_KEY \
            --env DATABASE_USER_FILE=/run/secrets/DATABASE_USER \
            --env DATABASE_FILE=/run/secrets/DATABASE \
            --env DATABASE_HOST_FILE=/run/secrets/DATABASE_HOST \
            --env DATABASE_PORT_FILE=/run/secrets/DATABASE_PORT \
            --env DATABASE_PASSWORD_FILE=/run/secrets/DATABASE_PASSWORD \
            --publish published=8080,target=80 \
            ${{ secrets.DOCKERHUB_USERNAME }}/fastapisql:v0.1

          sleep 10
          docker ps fast-app
